/*
===============================================================================
Magnitude Analysis
===============================================================================
Objective:
    - To quantify the data and categorize the results based on specific dimensions.
    - To gain insights into how the data is distributed across various categories.

SQL Functions Used:
    - Aggregate Functions: SUM(), COUNT(), AVG()
    - Clauses: GROUP BY, ORDER BY
===============================================================================
*/

-- Calculate the total number of customers per country
SELECT
    country,
    COUNT(customer_key) AS Total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Calculate the total number of customers by gender
SELECT
    gender,
    COUNT(customer_key) AS Total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Calculate the total number of products per category
SELECT
    category,
    COUNT(product_key) AS Total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- Calculate the average cost per category
SELECT
    category,
    AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;

-- Calculate the total revenue generated by each category
SELECT
    p.category,
    SUM(f.sales_amount) AS Total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;

-- Calculate the total revenue generated by each subcategory
SELECT
    p.subcategory,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.subcategory
ORDER BY total_revenue DESC;

-- Calculate the total revenue generated by each customer
SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS Total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- Calculate the distribution of sold items across different countries
SELECT
    c.country,
    SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;